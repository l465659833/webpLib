import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

version  = "0.1"
def siteUrl = 'https://github.com/l465659833/webpLib'                        // #CONFIG# // project homepage
def gitUrl = 'https://github.com/l465659833/webpLib.git'                     // #CONFIG# // project git
group = "com.pl"


android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            // Don't use native sources building using gradle,
            // since gradle ignores custom Android.mk
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
}


task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
    def ndkPath = android.ndkDirectory
    if (ndkPath != null) {
        ndkPath = ndkPath.absolutePath;
    }
    if (ndkPath == null) {
        throw new GradleException("NDK not found.")
    }
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine ndkPath + '/ndk-build.cmd',
                '-C', file('.').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all'
    } else {
        commandLine "sh", ndkPath + '/ndk-build',
                '-C', file('.').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all'
    }

    doLast {
        if (execResult.exitValue != 0) {
            throw new GradleException()
        }
    }
}

task cleanNative(type: Exec, description: 'Clean JNI object files') {
    def ndkPath = android.ndkDirectory
    if (ndkPath != null) {
        ndkPath = ndkPath.absolutePath;
    }
    if (ndkPath == null) {
        throw new GradleException("NDK not found.")
    }
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine ndkPath + '/ndk-build.cmd',
                '-C', file('.').absolutePath,
                'clean'
    } else {
        commandLine "sh", ndkPath + '/ndk-build',
                '-C', file('.').absolutePath,
                'clean'
    }

    doLast {
        if (execResult.exitValue != 0) {
            throw new GradleException()
        }
    }
}

clean.dependsOn 'cleanNative'

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn buildNative
}




install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                name 'webpLib'                                   // #CONFIG# // project title
                url siteUrl
                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'pl'                                           // #CONFIG# // your user id (you can write your nickname)
                        name 'l465659833'                                       // #CONFIG# // your user name
                        email 'hnldpl@gmail.com'                               // #CONFIG# // your email
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    // archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
boolean isHasFile = false
File localFile=new File("local.properties");
if (localFile.exists()){
    isHasFile = true
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    println("properties==============="+properties)
}else {
    println("properties==============="+"not find")
}

bintray {
    user = isHasFile ? properties.getProperty("bintray.user") : System.getenv("bintray.user")
    key = isHasFile ? properties.getProperty("bintray.apikey") : System.getenv("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "webpLib"                                                 // #CONFIG# project name in jcenter
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}